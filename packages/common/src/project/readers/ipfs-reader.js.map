{"version":3,"file":"ipfs-reader.js","sourceRoot":"","sources":["ipfs-reader.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;;;;;AAEtC,yCAAyC;AACzC,wEAAoC;AACpC,sDAA2B;AAI3B,MAAa,UAAU;IAGrB,YAA6B,GAAW,EAAE,OAAe;QAA5B,QAAG,GAAH,GAAG,CAAQ;QACtC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QACD,IAAI,CAAC,IAAI,GAAG,0BAAI,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,OAAO,EAAC,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,IAAI;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,MAAM;QACV,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjD,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,CAAC,GAAG,gBAAgB,CAAC,CAAC;SACtE;QACD,OAAO,iBAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,QAAgB;;QAC5B,IAAI;YACF,MAAM,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YACzD,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC5C,MAAM,iBAAiB,GAAiB,EAAE,CAAC;;gBAC3C,KAAwB,IAAA,QAAA,cAAA,GAAG,CAAA,SAAA;oBAAhB,MAAM,GAAG,gBAAA,CAAA;oBAClB,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC7B;;;;;;;;;YACD,OAAO,MAAM,CAAC,IAAI,CAAC,IAAA,gBAAS,EAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SACtE;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;YAC3C,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;CACF;AAxCD,gCAwCC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {u8aConcat} from '@polkadot/util';\nimport IPFS from 'ipfs-http-client';\nimport yaml from 'js-yaml';\nimport {IPackageJson} from 'package-json-type';\nimport {Reader} from './reader';\n\nexport class IPFSReader implements Reader {\n  private ipfs: IPFS.IPFSHTTPClient;\n\n  constructor(private readonly cid: string, gateway: string) {\n    if (!gateway) {\n      throw new Error('IPFS Gateway not provided');\n    }\n    this.ipfs = IPFS.create({url: gateway});\n  }\n\n  get root(): undefined {\n    return undefined;\n  }\n\n  async getPkg(): Promise<IPackageJson | undefined> {\n    return Promise.resolve(undefined);\n  }\n\n  async getProjectSchema(): Promise<unknown | undefined> {\n    const projectYaml = await this.getFile(this.cid);\n    if (projectYaml === undefined) {\n      throw new Error(`Fetch project from ipfs ${this.cid} got undefined`);\n    }\n    return yaml.load(projectYaml);\n  }\n\n  async getFile(fileName: string): Promise<string | undefined> {\n    try {\n      const resolvedFileName = fileName.replace('ipfs://', '');\n      const req = this.ipfs.cat(resolvedFileName);\n      const scriptBufferArray: Uint8Array[] = [];\n      for await (const res of req) {\n        scriptBufferArray.push(res);\n      }\n      return Buffer.from(u8aConcat(...scriptBufferArray)).toString('utf8');\n    } catch (e) {\n      console.error(`Reader get file failed`, e);\n      return undefined;\n    }\n  }\n}\n"]}
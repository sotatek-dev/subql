{"version":3,"file":"reader.js","sourceRoot":"","sources":["reader.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,4CAAoB;AACpB,4CAAoB;AACpB,gDAAwB;AAExB,8CAAsB;AACtB,mDAA6C;AAC7C,+CAAyC;AACzC,iDAA2C;AAa3C,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,0BAA0B,CAAC,CAAC;AACrD,MAAM,KAAK,GAAG,IAAI,MAAM,CACtB,yGAAyG,CAC1G,CAAC;AAEF,KAAK,UAAU,kBAAkB,CAAC,WAAmB;IACnD,MAAM,GAAG,GAAG,cAAI,CAAC,GAAG,CAAC;IACrB,MAAM,MAAM,GAAG,YAAE,CAAC,MAAM,EAAE,CAAC;IAC3B,MAAM,QAAQ,GAAG,YAAE,CAAC,WAAW,CAAC,GAAG,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC;IACnD,oDAAoD;IACpD,MAAM,aAAG,CAAC,CAAC,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,GAAG,EAAE,QAAQ,EAAC,CAAC,CAAC;IAChD,OAAO,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACrC,CAAC;AAED,MAAa,aAAa;IACxB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAgB,EAAE,OAAuB;QAC3D,iEAAiE;QACjE,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAChF,IAAI,WAAW,EAAE;YACf,OAAO,IAAI,4BAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SACzC;QAED,MAAM,qBAAqB,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAE9D,IAAI,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE;YAC1E,OAAO,IAAI,wBAAU,CAAC,qBAAqB,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;SAC5D;QAED,MAAM,KAAK,GAAG,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;YACvB,OAAO,IAAI,0BAAW,CAAC,QAAQ,CAAC,CAAC;SAClC;QAED,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE;YAClB,MAAM,WAAW,GAAG,MAAM,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YACvD,OAAO,IAAI,0BAAW,CAAC,WAAW,CAAC,CAAC;SACrC;QAED,MAAM,IAAI,KAAK,CAAC,qBAAqB,QAAQ,EAAE,CAAC,CAAC;IACnD,CAAC;CACF;AA1BD,sCA0BC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {IPackageJson} from 'package-json-type';\nimport tar from 'tar';\nimport {GithubReader} from './github-reader';\nimport {IPFSReader} from './ipfs-reader';\nimport {LocalReader} from './local-reader';\n\nexport type ReaderOptions = {\n  ipfs: string;\n};\n\nexport interface Reader {\n  getProjectSchema(): Promise<unknown | undefined>;\n  getPkg(): Promise<IPackageJson | undefined>;\n  getFile(file: string): Promise<string | undefined>;\n  root: string | undefined;\n}\n\nconst CIDv0 = new RegExp(/Qm[1-9A-Za-z]{44}[^OIl]/i);\nconst CIDv1 = new RegExp(\n  /Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,}/i\n);\n\nasync function extractFromArchive(projectPath: string): Promise<string> {\n  const sep = path.sep;\n  const tmpDir = os.tmpdir();\n  const tempPath = fs.mkdtempSync(`${tmpDir}${sep}`);\n  // Will promote errors if incorrect format/extension\n  await tar.x({file: projectPath, cwd: tempPath});\n  return tempPath.concat('/package');\n}\n\nexport class ReaderFactory {\n  static async create(location: string, options?: ReaderOptions): Promise<Reader> {\n    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n    const githubMatch = location.match(/https:\\/\\/github.com\\/([\\w-_]+\\/[\\w-_]+)/i);\n    if (githubMatch) {\n      return new GithubReader(githubMatch[1]);\n    }\n\n    const locationWithoutSchema = location.replace('ipfs://', '');\n\n    if (CIDv0.test(locationWithoutSchema) || CIDv1.test(locationWithoutSchema)) {\n      return new IPFSReader(locationWithoutSchema, options.ipfs);\n    }\n\n    const stats = fs.statSync(location);\n    if (stats.isDirectory()) {\n      return new LocalReader(location);\n    }\n\n    if (stats.isFile()) {\n      const projectPath = await extractFromArchive(location);\n      return new LocalReader(projectPath);\n    }\n\n    throw new Error(`unknown location: ${location}`);\n  }\n}\n"]}